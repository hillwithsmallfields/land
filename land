#!/usr/bin/python3

# Program to configure and install one of my usual environments on a
# freshly-installed Raspian (or other system).
#
# Run like this, on the target host:
#
# curl https://raw.githubusercontent.com/hillwithsmallfields/land/trunk/land | sudo python3

import argparse
import getpass
import glob
import json
import logging
import os
import pwd
import re
import requests
import shutil
import socket
import sys
import time
import urllib.request
import uuid

##########################
# File and text handling #
##########################

dirmask = 0o755

MODEL_FILENAME = "/proc/device-tree/model"

def file_has_line_starting(filename, incipit):
    """Return whether a file contains a line starting with a given marker."""
    with open(filename, 'r') as stream:
        return any((line.startswith(incipit) for line in stream))

def append_to_file_if_missing(filename, incipit, addendum):
    """If a file doesn't contain a line with a given marker,
    add a specified string at the end."""
    if not file_has_line_starting(filename, incipit):
        with open(filename, 'a') as contents:
            contents.write(addendum)

def prepend_to_lines_starting(filename, incipit, addendum):
    """To any lines in a file starting with a given marker,
    ensure that they start with a given string.
    Meant for commenting out lines of config files."""
    with open(filename, 'r') as stream:
        lines = [line for line in stream]
    with open(filename, 'w') as stream:
        for line in lines:
            if line.startswith(incipit):
                line = addendum + line
            stream.write(line)

def append_to_lines_starting(filename, incipit, addendum):
    """To any lines in a file starting with a given marker,
    ensure that they end in a given string."""
    with open(filename, 'r') as stream:
        lines = [line for line in stream]
    with open(filename, 'w') as stream:
        for line in lines:
            if line.startswith(incipit) and not line.endswith(addendum):
                line = line[:-1] + addendum + line[-1]
            stream.write(line)

def replace_string_in_file(filename, oldstring, newstring):
    """Replace all occurrences of a string in a file."""
    with open(filename, 'r') as stream:
        lines = [line for line in stream]
    with open(filename, 'w') as stream:
        for line in lines:
            stream.write(line.replace(oldstring, newstring))

def replace_regexps_in_file(filename, replacements):
    """Modify a file line-by-line.

    Any lines matching keys of the replacments dictionary get replaced
    by the corresponding values.  Only the first match is done."""
    with open(filename, 'r') as stream:
        lines = [line for line in stream]
    with open(filename, 'w') as stream:
        for line in lines:
            for pattern, replacement in replacements.items():
                line, n = re.subn(pattern, replacement, line)
                if n > 0:
                    break
            stream.write(line)

def git_site_author_and_repo(repo):
    """Get the user and author parts of a repo URL."""
    matched = re.match("https://([^/]+)/", repo)
    if matched:
        parts = repo.split("/")
        return matched.group(1), "/".join(parts[3:-1]), os.path.splitext(parts[-1])[0]
    matched = re.match("git@([^/]+):", repo)
    if matched:
        parts = repo.split(':')[1].split('/')
        return matched.group(1), parts[0], os.path.splitext(parts[1])[0]
    return "anon"

def model():
    # https://gist.github.com/jperkin/c37a574379ef71e339361954be96be12
    # yields these (after the transformations we do):
    #
    # 2-Model-B
    # 3-Model-B
    # 3-Model-B Plus
    # 4-Model-B
    # Compute-Module
    # Compute-Module-3
    # Compute-Module-3-Plus
    # Model-B
    # Model-B Plus
    # Zero-W
    #
    if os.path.isfile(MODEL_FILENAME):
        with open(MODEL_FILENAME) as model_stream:
            found = re.search("Raspberry Pi (.+)( Rev.+ )?", model_stream.read())
            return found.group(1).replace(' ', '-') if found else "unknown"
    else:
        return "not-a-pi"

def file_contents(filename):
    """Return the contents of a file."""
    if os.path.exists(filename):
        with open(filename) as filestream:
            return filestream.read()
    return None

def get_partitions_usage():
    """Return a dictionary mapping mount points to tuples of (total, used, free)."""
    with open("/proc/mounts") as mounts:
        return {partition: shutil.disk_usage(partition)
                for partition in (mount.split(" ", 2)[1]
                                  for mount in mounts
                                  if mount.startswith("/dev/"))}

def get_partitions_used():
    """Return a dictionary mapping mount points to bytes used."""
    return {partition: usage[1] for partition, usage in get_partitions_usage().items()}

def get_partitions_free():
    """Return a dictionary mapping mount points to bytes free."""
    return {partition: usage[2] for partition, usage in get_partitions_usage().items()}

def compare_partitions_used(old, new):
    """Compare two dictionaries of bytes used per partition."""
    return {partition: used - old[partition]
            for partition, used in new.items()
            if used != old[partition]}

##########################
# Configuration handling #
##########################

def merge(old, new):
    """Merge two configurations recursively."""
    for k, v in new.items():
        if k in old:
            if isinstance(old[k], list):
                if isinstance(v, list):
                    old[k] += [nv for nv in v if nv not in old[k]]
                else:
                    old[k].append(v)
            elif isinstance(old[k], dict):
                if isinstance(v, dict):
                    merge(old[k], v)
                else:
                    logging.warn("cannot merge non-dict %s into dict", v)
            else:
                old[k] = v
        else:
            old[k] = v
    return old

def activate(subconf_name, conf, active, classes):
    """If a given name occurs in a configuration dictionary,
    bring its contents into the active configuration."""
    if subconf_name in conf:
        merge(active, conf[subconf_name])
    get_includes(active, classes)

def get_includes(conf, classes):
    """Process any includes and superclasses at the top level of a configuration."""
    if 'includes' in conf:
        includes = conf['includes']
        del conf['includes']
        for inc in includes:
            get_configuration(inc, conf)
    if 'superclasses' in conf:
        superclasses = conf['superclasses']
        del conf['superclasses']
        for sup in superclasses:
            activate(sup, classes, conf, classes)

def get_configuration(confname, classes, existing=None):
    """Fetch a configuration from file or the web."""
    if existing is None:
        existing = {}
    if confname.split(':', 1)[0] in ('https', 'http'):
        conf = requests.get(confname).json()
    else:
        with open(confname) as confstream:
            conf = json.load(confstream)
    merge(existing, conf)
    get_includes(existing, classes)
    return existing

#######################
# Host and user setup #
#######################

def set_hostname(newname):
    """Set this machine's hostname."""
    oldname = socket.gethostname()
    if newname != oldname:
        logging.debug("Changing hostname from %s to %s", oldname, newname)
        with open("/etc/hostname", 'w') as namestream:
            namestream.write(newname + '\n')
        with open("/etc/hosts", 'r') as hoststream:
            hosts = [host.replace(oldname, newname) for host in hoststream]
        with open("/etc/hosts", 'w') as hoststream:
            for host in hosts:
                hoststream.write(host)

def add_user(user, name, hostname):
    """Add the user (if not already present), with their password
    disabled but ssh login allowed.
    Also put them in /etc/sudoers, and add them to the GPIO group.
    Return the user id, and whether their entry was newly created."""
    added = False
    if user and user == "":
        logging.warn("No user specified to add_user")
        return None, added
    try:
        _ = pwd.getpwnam(user)
        logging.debug("User %s already exists", user)
    except KeyError:
        logging.debug("Adding user %s", user)
        sh('adduser --disabled-password --gecos "%s" %s' % (name, user))
        added = True
        print("run 'sudo passwd %s' to set your password" % user)
        print("then on desktop, do this: ssh-copy-id %s@%s" % (user, hostname))

        sh("ssh-keygen -A && update-rc.d ssh enable && invoke-rc.d ssh start") # from the insides of raspi-config

    append_to_file_if_missing("/etc/sudoers",
                              user,
                              "%s    ALL=(ALL:ALL) ALL\n" % user)

    append_to_lines_starting("/etc/group",
                             "gpio",
                             "," + user)

    return user, added

def switch_to_user(user):
    """Switch from running as root to running as the specified user."""
    logging.debug("Switching from running as root to running as %s", user)
    if user:
        udata = pwd.getpwnam(user)
        uid = udata[2]
        gid = udata[3]
        logging.info("Doing rest of setup as user %s (uid %d, gid %d)", user, uid, gid)
        os.setgid(gid)          # can't do this after the setuid, because of not being root any longer
        os.setuid(uid)
    else:
        logging.info("User not specified, so completing setup as root")

def install_dotfiles(configuration, home_directory):
    """Copy the user's dotfiles into place, prepending dots to the names if needed."""
    repos_dir = configuration.get('repos-directory')
    dot_files = configuration.get('dot-files')
    config_project = configuration.get('config-repo')
    logging.info("dot_files are %s and config_project is %s in the repos_dir %s",
                 dot_files, config_project, repos_dir)
    if dot_files and config_project:
        config_dir = os.path.join(home_directory, repos_dir, config_project)
        logging.info("config dir is %s", config_dir)
        for dot_file in dot_files:
            origin = os.path.join(config_dir, dot_file)
            logging.debug("considering copying %s", origin)
            if os.path.isfile(origin):
                logging.debug("copying %s with a dot, into %s", origin, home_directory)
                shutil.copy(origin,
                            os.path.join(home_directory,
                                         (dot_file
                                          if dot_file.startswith(".")
                                          else ("." + dot_file))))

def copy_user_config_files(template_directory, dest):
    """Copy files from a template directory to the new user."""
    dest = os.path.expanduser(dest)
    os.makedirs(dest, dirmask, True)
    shutil.copytree(os.path.expanduser(template_directory), dest)

###########
# Actions #
###########

def sh(command):
    logging.debug("Running command %s", command)
    os.system(command)

def git_clone(repo, git_target_protocol='git'):
    """Clone a git repo, if we don't already have it.
    Since .ssh isn't yet set up, fetch with http and optionally patch it to look
    like .git afterwards."""
    directory = os.path.basename(repo)[:-4]
    if not os.path.isdir(directory):
        logging.info("cloning %s into %s", repo, directory)
        print("cloning %s into %s" % (repo, directory))
        original = repo
        if repo.startswith("git@github.com:"):
            repo = "https://github.com/" + repo[len("git@github.com:"):]
        print("cloning", repo)
        sh("git clone " + repo)
        if repo != original and git_target_protocol == 'git':
            replace_string_in_file(os.path.join(directory, ".git", "config"),
                                   "https://github.com/",
                                   "git@github.com:")
        sh("git config pull.ff only")

def remount(ext_disk, mount_point,
            home_directory, user):
    """Move a partition to a new mount point.
    Also, optionally make symlinks from the user's home directory to
    everything in a home-like directory in the partition, and optionally
    transfer ownership of the link targets to the user.

    This is meant as an alternative to putting the user's home directory
    onto the possibly removable external drive, so at least they can log
    in when it is not present.  Could possibly be replaced by having a
    user directory in the mount point for when the external drive isn't
    mounted, but then the mounted filesystem would have to be just the
    user's home directory."""
    if ext_disk and os.path.exists(ext_disk) and mount_point:
        logging.info("Moving %s to mount point %s", ext_disk, mount_point)
        sh("umount " + ext_disk)
        append_to_file_if_missing("/etc/fstab",
                                  ext_disk,
                                  "%s %s ext4 defaults 0 0\n" % (ext_disk, mount_point))
        os.makedirs(mount_point, dirmask, True)
        sh("mount " + ext_disk)
        if home_directory and os.path.isdir(mount_point):
            user_dir = os.path.join(mount_point, "home", user)
            if os.path.isdir(user_dir):
                logging.info("Linking user files in %s from HDD", user_dir)
                for filename in glob.glob(user_dir+"/*"):
                    link = os.path.join(home_directory, os.path.basename(filename))
                    if not os.path.exists(link):
                        logging.info("  Linking %s to %s", link, filename)
                        os.symlink(filename, link)
                        if user:
                            sh("chown -R %s:%s %s" % (user, user, filename))
        else:
            logging.warn("No directory found at mount point %s", mount_point)
    else:
        logging.warn("External disk %s not found", ext_disk)

def fetch_page(url, filename):
    """Fetch a file from the web."""
    urllib.request.urlretrieve(url, filename)

###############################
# Getting project collections #
###############################

def get_user_projects(configuration, home_directory):
    """Get the user's collection of projects from a network repository.
This currently assumes github's repo listing API."""
    # This should be relative to the user's home directory, or
    # absolute (avoiding any confusion about using $HOME coming from
    # this program running as root until it changes uid).
    projects_dir_name = configuration.get('projects-directory')
    if projects_dir_name:
        projects_dir = (projects_dir_name
                        if os.path.isabs(projects_dir_name)
                        else os.path.join(home_directory, projects_dir_name))
        os.makedirs(projects_dir, dirmask, True)
        logging.info("Cloning projects into %s", projects_dir)
        for repo in requests.get(configuration['github-list']).json():
            if os.path.isdir(os.path.join(projects_dir, repo['name'])):
                logging.info("Already got repo %s", repo['name'])
            else:
                os.chdir(projects_dir)
                git_clone(repo['git_url'], configuration['git-target-protocol'])

def get_repos(configuration, home_directory, repos):
    # This should be relative to the user's home directory, or
    # absolute (avoiding any confusing about using $HOME coming from
    # this program running as root until it changes uid).
    repos_dir_name = configuration.get('repos-directory')
    repos_directory = (repos_dir_name
                       if os.path.isabs(repos_dir_name)
                       else os.path.join(home_directory, repos_dir_name))

    if repos and repos_directory:
        repos_directory = os.path.expandvars(repos_directory)
        logging.info("Fetching %s into %s", repos, repos_directory)
        for repo in repos:
            site, author, reponame = git_site_author_and_repo(repo)
            author_directory = os.path.join(repos_directory, site, author)
            os.makedirs(author_directory, dirmask, True)
            repodir = os.path.join(author_directory, reponame)
            if os.path.isdir(repodir):
                logging.info("updating %s", repo)
                print("updating", repo)
                os.chdir(repodir)
                sh("git pull")
            else:
                logging.info("cloning %s under author directory %s", repo, author_directory)
                print("cloning %s under author directory %s" % (repo, author_directory))
                os.chdir(author_directory)
                git_clone(repo, configuration['git-target-protocol'])

##############
# Main logic #
##############

def assemble_configuration(args):
    """Assemble and return a configuration."""
    mac = uuid.getnode()        # not using getmac because it's not installed yet

    description = {
        'original-hostname': socket.gethostname(),
        'model': model(),
        'mac-addr': args.mac_addr or (':'.join(["%02x" % (mac >> x & 0xff) for x in range(0, 8*6, 8)][::-1])),
        'serial': file_contents("/proc/device-tree/serial-number")
        }

    if args.host_class:
        description['host-class'] = args.host_class

    confname = args.config
    if '%' in confname:
        confname %= description

    all_configuration = get_configuration(confname, {})
    if 'redirect' in all_configuration:
        all_configuration = get_configuration(all_configuration['redirect'] % description,
                                              {},
                                              all_configuration)

    host_descriptions = all_configuration.get('hosts', {})
    host_classes = all_configuration.get('host-classes', {})
    configuration = {}

    activate('global', host_classes, configuration, host_classes)
    # Try various forms of host identity; possibly one of them will
    # yield a host-class, and may also give us a hostname:
    for aspect in ('original-hostname', 'mac-addr', 'serial'):
        activate(description[aspect], host_descriptions, configuration, host_classes)
        if 'host-class' in description:
            break
    # There may be some information specific to an individual host,
    # but by name rather than MAC address or serial number:
    if 'hostname' in configuration:
        activate(configuration['hostname'], host_descriptions, configuration, host_classes)
    # If we're going to get a host class, we will have got it by now:
    activate(configuration.get('host-class'), host_classes, configuration, host_classes)
    activate(description.get('host-class'), host_classes, configuration, host_classes)
    # for debugging with --dry-run:
    if 'host-class' not in configuration:
        configuration['host-class'] = description.get('host-class', 'not specified')

    # overrides from the command line:
    for k, v in vars(args).items():
        if v:
            configuration[k] = v

    return configuration

def apply_root_config(configuration):
    """Apply the part of the config that is done as root (as distinct from as the user)."""
    if configuration.get('hostname', "") != "":
        set_hostname(configuration['hostname'])

    hostname = socket.gethostname()

    logging.info("Running on host %s", hostname)

    if 'apt-remove' in configuration:
        logging.info("Uninstalling these packages using apt: %s", ", ".join(configuration['apt-remove']))
        for package in configuration['apt-remove']:
            sh("apt-get remove %s" % package)
    if 'pip-remove' in configuration:
        logging.info("Uninstalling these packages using pip: %s", ", ".join(configuration['pip-remove']))
        for package in configuration['pip-remove']:
            sh("pip3 uninstall %s" % package)
    if 'web' in configuration:
        for url, dest_file in configuration['web']:
            if os.path.isabs(dest_file):
                logging.info("Fetching file %s from the web and writing it to %s", url, dest_file)
                fetch_page(url, dest_file)
    if 'apt-install' in configuration:
        logging.info("Installing these packages using apt: %s", ", ".join(configuration['apt-install']))
        for package in configuration['apt-install']:
            sh("apt-get install --assume-yes %s" % package)
    if 'pip-install' in configuration:
        logging.info("Installing these packages using pip: %s", ", ".join(configuration['pip-install']))
        for directory, packages in configuration['pip-install'].items():
            if directory is None or directory == 'None' or directory == 'global':
                for package in packages:
                    sh("pip3 install %s" % package)
            else:
                # if it's for a specific directory, it will be done in apply_user_config
                pass
    if 'other-install' in configuration:
        for installer, packages in configuration['other-install'].items():
            logging.info("Installing these packages using %s: %s", ", ".join(packages))
            for package in packages:
                sh("%s install %s" % (installer, package))
    if 'sea-install' in configuration:
        urls = configuration['sea-install']
        logging.info("Installing these packages as self-extracting archives: %s", ", ".join(urls))
        for url in urls:
            filename = os.path.join("/tmp", os.path.basename(url))
            fetch_page(url, filename)
            os.chmod(filename, 0o555)
            sh(filename)
            os.remove(filename)

    user, user_is_new = None, False
    username = configuration.get('user')
    if username:
        user, user_is_new = add_user(username,
                        configuration.get('name'),
                        hostname)
        home_directory = (pwd.getpwnam(user)[5]
                          if user
                          else os.path.join("/home", configuration.get('user')))

    if not configuration.get('no-partition-ops', False):
        for ext_disk, mount_description in configuration.get('mounts', {}).items():
            logging.info("Remounting %s as %s", ext_disk, mount_description)
            remount(ext_disk,
                    mount_description['mount-point'],
                    mount_description['link-to-home'] and home_directory,
                    mount_description['take-ownership'] and user)

    if configuration.get('suppress-auto-login', False):
        # So that a Raspberry Pi won't come up logged in when booted
        logging.info("Suppressing auto-login")
        prepend_to_lines_starting("/etc/lightdm/lightdm.conf", "autologin-user", "# ")

    for system_directory in configuration.get('system-directories', []):
        logging.info("Making system directory %s", system_directory)
        os.makedirs(system_directory, dirmask, True)
    for config_source, config_dest in configuration.get('copy-configs', {}).items():
        # sh("chmod -R a+rx " + config_source) # shouldn't need, as am root
        config_dest = os.path.expanduser(config_dest % (user or ""))
        # os.makedirs(config_dest, dirmask, True)
        print("copying", os.path.expanduser(config_source), "to", config_dest)
        shutil.copytree(os.path.expanduser(config_source), config_dest)
        if user:
            sh("chown -R %s:%s %s" % (user, user, config_dest))
            sh("chmod -R a+rx %s" % config_dest)
    for directory, root_action in configuration.get('root-actions', {}).items():
        logging.info("Running action '%s' as root, in directory %s", root_action, directory)
        os.chdir(directory)
        sh(root_action)

    return user, user_is_new, home_directory

def apply_user_config(configuration,
                      user, user_is_new, home_directory):
    """Apply the part of the config that is done as the user (as distinct from as root)."""
    get_user_projects(configuration, home_directory)
    get_repos(configuration, home_directory, configuration.get('git-repos'))
    if 'web' in configuration:
        for url, dest_file in configuration['web']:
            if not os.path.isabs(dest_file):
                logging.info("Fetching %s from the web and saving it as user file %s", url, dest_file)
                fetch_page(url, os.path.join(home_directory, dest_file))
    install_dotfiles(configuration, home_directory)

    if 'pip-install' in configuration:
        logging.info("Installing these packages into virtual environments using pip: %s", ", ".join(configuration['pip-install']))
        for directory, packages in configuration['pip-install'].items():
            # installs without a specified directory will have been
            # done as global installs, while we were still running as root:
            if directory is not None and directory != 'None' and directory != 'global':
                if not os.path.isabs(directory):
                    directory = os.path.join(home_directory, directory)
                if not os.path.isdir(directory):
                    os.makedirs(directory, dirmask, True)
                os.chdir(directory)
                logging.info("In directory %s, installing packages %s", directory, packages)
                print("In directory %s, installing packages %s" % (directory, packages))
                env_name = "env"
                env_dir = os.path.join(directory, env_name)
                if not os.path.isdir(env_dir):
                    logging.info("creating virtual environment %s", env_dir)
                    sh("python3 -m venv " + env_name)
                logging.debug("Running: '. %s/bin/activate; pip3 install %s' in directory %s", env_dir, packages, directory)
                print("Running: '. %s/bin/activate; pip3 install %s' in directory %s" % (env_dir, packages, directory))
                sh(". %s/bin/activate; pip3 install %s" % (env_dir, " ".join(packages)))
                logging.debug("Completed pip3 install")

    for user_directory in configuration.get('user-directories', []):
        logging.info("Creating user directory %s", user_directory)
        os.makedirs(os.path.join(home_directory, user_directory), dirmask, True)
    for filename, edits in configuration.get('edit-configs', {}).items():
        replace_regexps_in_file(os.path.expanduser(filename % (user or "")), edits)
    for user_action, directory in configuration.get('user-actions', {}).items():
        logging.info("Running user action '%s' in directory %s", user_action, directory)
        os.chdir(directory)
        sh(user_action)

    if user and user_is_new:
        print("Now run 'passwd %s' as root and set your initial user password." % user)
        print("Then on your 'home' machine, you may want to do this: ssh-copy-id %s@%s" % (user, socket.gethostname()))

def apply_config(configuration):
    """Apply a configuration dictionary to the current host."""

    user, user_is_new, home_directory = apply_root_config(configuration)
    switch_to_user(user)
    apply_user_config(configuration, user, user_is_new, home_directory)

################
# Main program #
################

def main():

    start_time = time.time()

    parser = argparse.ArgumentParser()
    parser.add_argument("--user",
                        help="""The account name of the user to create.""")
    parser.add_argument("--name",
                        help="""The full name of the user.""")
    parser.add_argument("--host",
                        help="""The name to give the host.""")
    parser.add_argument("--config",
                        default="https://raw.githubusercontent.com/hillwithsmallfields/land/trunk/land.json",
                        help="""Filename or URL overriding built-in settings.
                        Command line --user, --name, and --host override entries in this file.
                        If the string has % in it, named %-substitution is done,
                        with a dictionary binding 'origin-hostname', 'model', 'mac-addr',
                        and 'serial'.""")
    parser.add_argument("--dry-run",
                        action='store_true',
                        help="""Assemble a configuration, but don't apply it.""")
    parser.add_argument("--mac-addr",
                        help="""Supply MAC address to select a configuration.
                        In conjunction with --dry-run, lets you check the configuration
                        from your development host without having to load it onto a target
                        host.""")
    parser.add_argument("--host-class",
                        help="""The kind of installation you want.""")
    parser.add_argument("--user-only",
                        action='store_true',
                        help="""Only do the user part of the installation.""")
    parser.add_argument("--logfile",
                        default="landing.log")
    parser.add_argument("--loglevel",
                        help="""The loglevel to set.""")
    parser.add_argument("--verbose", "-v",
                        action='store_true',
                        help="""Produce more output.""")
    args = parser.parse_args()

    logger = logging.getLogger('lander')
    logging.basicConfig(filename=args.logfile)
    if args.loglevel:
        logger.setLevel(args.loglevel.upper())

    if getpass.getuser() != 'root' and not args.dry_run and not args.user_only:
        print("This program must be run as root")
        sys.exit(1)

    config = assemble_configuration(args)

    if args.dry_run or args.verbose:
        print("Assembled configuration", json.dumps(config, indent=4))
    if not args.dry_run:
        partitions_bytes_used = get_partitions_used()
        if args.user_only:
            apply_user_config(config,
                              getpass.getuser(), False, os.path.expanduser("~"))
        else:
            apply_config(config)
        installation_sizes = compare_partitions_used(partitions_bytes_used, get_partitions_used())
        print("This amount of space was consumed during the installation:")
        for part in sorted(installation_sizes.keys()):
            logging.info("%d bytes (%dKb, %dMb) on partition %s", installation_sizes[part], installation_sizes[part]/1024, installation_sizes[part]/(1024*1024), part)
            print(part, installation_sizes[part])

    logging.info("Setup took", time.time() - start_time, "seconds.")

if __name__ == "__main__":
    main()
